import React, { useEffect, useRef, useState } from 'react';
import '../App.css';
import { CheckVulnerability } from '../components/checker';
import TopicSnippet from '../components/homepage';
import Popup from '../components/popup';
import "../styles/Test.css";



const topics = [
  {
    title: 'SQL-Injection',
    description: 'SQL injection is a malicious technique used by attackers to manipulate a database by inserting or "injecting" malicious SQL code into input fields of a web application. This code can modify, delete, or extract sensitive data from the database. For example, an attacker could input something like "1; DROP TABLE users;-- into a login form, causing the database to execute both the legitimate query and the malicious one, potentially leading to catastrophic data loss. Preventing SQL injection involves validating and sanitizing user input, as well as using parameterized queries or prepared statements to interact with the database, which help to prevent malicious SQL injection attacks.' ,
    percentage: 30  
  },
  {
    title: 'Encryption',
    description: 'Encryption is a method of securing data by converting it into an unreadable format called ciphertext. It is used to protect sensitive information from unauthorized access or interception during transmission or storage. Encryption algorithms utilize keys to encrypt and decrypt data, with only authorized parties possessing the necessary keys to access the original plaintext. This process ensures confidentiality and data integrity, making encryption a fundamental component of cybersecurity protocols across various industries and applications.',
    percentage: 90  
  },
  {
    title: 'Auth(2FA)',
    description: 'Authentication through Two-Factor Authentication (2FA) is a security mechanism that adds an extra layer of protection to user accounts beyond traditional username and password combinations. In addition to entering their credentials, users must also provide a second form of verification, typically a temporary code generated by a separate device or application. This code is usually sent via SMS, email, or generated by an authenticator app. 2FA significantly enhances account security by requiring something the user knows (password) and something they have (temporary code), reducing the risk of unauthorized access even if passwords are compromised.',
    percentage: 60  
  },
  {
    title: 'Rate-Limiting ',
    description: 'Rate limiting is a technique used in computer systems to control the number of requests or actions that a user, IP address, or application can make within a specified time period. By enforcing limits on the frequency of requests, rate limiting helps prevent abuse, misuse, or overwhelming of resources such as servers or APIs. This can mitigate the risk of denial-of-service (DoS) attacks, improve system stability, and ensure fair usage of resources among all users. Rate limiting configurations typically include parameters like the maximum number of requests allowed per unit of time and the actions to take when limits are exceeded, such as returning an error response or delaying requests.',
    percentage: 80 },
  {
    title: 'Validating-FileType',
    description: 'Validating file types is a process of verifying that a file matches an expected format or type based on its content or metadata. This validation is crucial for security and data integrity, as it helps prevent the execution of malicious files or processing of unsupported formats. Techniques for file type validation include checking file extensions, inspecting file headers or magic numbers, and analyzing file signatures or MIME types. By ensuring that uploaded files adhere to expected formats, applications can mitigate risks associated with vulnerabilities such as file-based attacks or data corruption.',
    percentage: 10  
  },
  {
    title: '3rd Party Services',
    description: 'Securing third-party services, like libraries or APIs, involves assessing their trustworthiness, updating dependencies regularly, and implementing secure communication protocols (e.g., HTTPS). Monitoring for security updates and vulnerabilities is also crucial. In summary, its about evaluating, updating, and monitoring to ensure overall system security.',
    percentage: 80 
  },
  {
    title: 'XSS',
    description: 'Cross-Site Scripting (XSS) is a web security vulnerability where attackers inject malicious scripts into web pages viewed by other users. This allows them to steal data or hijack sessions. Prevention involves input validation, output encoding, and using security mechanisms like Content Security Policy (CSP).',
    percentage: 30  
  },
  {
    title: 'HTTPS',
    description: 'HTTPS vulnerabilities stem from weaknesses in the SSL/TLS protocol, certificate issues, and mixed content. Mitigation involves maintaining up-to-date SSL/TLS configurations, using strong encryption algorithms, avoiding mixed content, and conducting regular security audits.',
    percentage: 90  
  },
   {
    title: 'Firewall',
    description: 'Firewall implementation vulnerabilities stem from misconfigurations, weak authentication, software bugs, and misplaced trust. Mitigation involves regular configuration reviews, strict access controls, prompt patching, and supplementing firewalls with other security measures like intrusion detection systems.',
    percentage: 50 
  },
  {
    title: 'Ddos',
    description: 'A Distributed Denial of Service (DDoS) attack is a malicious attempt to disrupt the normal traffic of a targeted server, service, or network by overwhelming it with a flood of incoming traffic. Attackers use networks of compromised computers (botnets) to generate massive amounts of traffic, exhausting the targets resources and rendering it inaccessible to legitimate users. DDoS attacks can disrupt business operations, cause financial losses, and damage an organizations reputation. Mitigation strategies include using DDoS protection services, deploying firewalls and intrusion prevention systems, and having redundancy in infrastructure to handle sudden increases in traffic.',
    percentage:  0 
  }
];

 export function Test() {
  const [popupInfo, setPopupInfo] = useState(null);
  const popupRef = useRef(null);

  useEffect(() => {
    if (popupInfo) {
      popupRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  }, [popupInfo]);

  const openPopup = (title, description) => {
    setPopupInfo({ title, description });
  };

  const closePopup = () => {
    setPopupInfo(null);
  };

  return (
    <div className="test">
      <TopicSnippet topics={topics} openPopup={openPopup} />
      <CheckVulnerability/>
      {popupInfo && (
        <div ref={popupRef}>
          <Popup
            title={popupInfo.title}
            description={popupInfo.description}
            onClose={closePopup}
            />
           
        </div>
      )}
    </div>
  );
};

export default Test;